{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AppComponent = class AppComponent {\n  constructor(userService, fb) {\n    this.userService = userService;\n    this.fb = fb;\n    this.users = [];\n    this.isEditing = false;\n    this.selectedUserId = null;\n    this.errorMessage = null;\n    this.isLoading = false; // Inizializza il form con FormBuilder per un controllo migliore\n\n    this.userForm = this.fb.group({\n      username: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  ngOnInit() {\n    this.loadUsers();\n  }\n  /**\r\n   * Carica la lista degli utenti dal servizio.\r\n   */\n\n\n  loadUsers() {\n    this.isLoading = true;\n    this.errorMessage = null;\n    this.userService.getAllUsers().subscribe({\n      next: data => {\n        this.users = data;\n        this.isLoading = false;\n      },\n      error: err => {\n        console.error('Errore nel caricamento degli utenti:', err);\n        this.errorMessage = 'Impossibile caricare la lista degli utenti. Assicurati che il backend sia in esecuzione.';\n        this.isLoading = false;\n      }\n    });\n  }\n  /**\r\n   * Gestisce il submit del form.\r\n   * Decide se creare un nuovo utente o aggiornarne uno esistente.\r\n   */\n\n\n  onSubmit() {\n    if (this.userForm.invalid) {\n      return; // Non fare nulla se il form non è valido\n    }\n\n    const user = {\n      username: this.userForm.value.username,\n      email: this.userForm.value.email\n    };\n\n    if (this.isEditing && this.selectedUserId) {\n      // Modalità modifica\n      this.userService.updateUser(this.selectedUserId, user).subscribe({\n        next: () => {\n          this.loadUsers(); // Ricarica la lista\n\n          this.resetForm();\n        },\n        error: err => {\n          console.error('Errore nell\\'aggiornamento dell\\'utente:', err);\n          this.errorMessage = 'Errore durante l\\'aggiornamento dell\\'utente.';\n        }\n      });\n    } else {\n      // Modalità creazione\n      this.userService.createUser(user).subscribe({\n        next: () => {\n          this.loadUsers(); // Ricarica la lista\n\n          this.resetForm();\n        },\n        error: err => {\n          console.error('Errore nella creazione dell\\'utente:', err);\n          this.errorMessage = 'Errore durante la creazione dell\\'utente.';\n        }\n      });\n    }\n  }\n  /**\r\n   * Prepara il form per la modifica di un utente.\r\n   * @param user L'utente da modificare.\r\n   */\n\n\n  editUser(user) {\n    this.isEditing = true;\n    this.selectedUserId = user.id;\n    this.userForm.setValue({\n      username: user.username,\n      email: user.email\n    });\n    window.scrollTo(0, 0); // Scrolla in cima alla pagina per vedere il form\n  }\n  /**\r\n   * Elimina un utente dopo conferma.\r\n   * @param id L'ID dell'utente da eliminare.\r\n   */\n\n\n  deleteUser(id) {\n    if (confirm('Sei sicuro di voler eliminare questo utente?')) {\n      this.userService.deleteUser(id).subscribe({\n        next: () => {\n          this.loadUsers(); // Ricarica la lista\n        },\n        error: err => {\n          console.error('Errore nell\\'eliminazione dell\\'utente:', err);\n          this.errorMessage = 'Errore durante l\\'eliminazione dell\\'utente.';\n        }\n      });\n    }\n  }\n  /**\r\n   * Annulla l'operazione di modifica e resetta il form.\r\n   */\n\n\n  cancelEdit() {\n    this.resetForm();\n  }\n  /**\r\n   * Resetta lo stato del form.\r\n   */\n\n\n  resetForm() {\n    this.isEditing = false;\n    this.selectedUserId = null;\n    this.userForm.reset();\n  }\n\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module"}