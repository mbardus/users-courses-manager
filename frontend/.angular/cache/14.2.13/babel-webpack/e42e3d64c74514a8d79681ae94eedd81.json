{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = '/api/users';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /**\r\n     * Recupera tutti gli utenti dal backend.\r\n     * @returns Un Observable contenente un array di User.\r\n     */\n\n\n    getAllUsers() {\n      return this.http.get(this.apiUrl);\n    }\n    /**\r\n     * Recupera un singolo utente per ID.\r\n     * @param id L'ID dell'utente da recuperare.\r\n     * @returns Un Observable contenente l'utente trovato.\r\n     */\n\n\n    getUserById(id) {\n      const url = `${this.apiUrl}/${id}`;\n      return this.http.get(url);\n    }\n    /**\r\n     * Crea un nuovo utente.\r\n     * @param user L'oggetto User da creare.\r\n     * @returns Un Observable contenente l'utente creato dal backend (con l'ID).\r\n     */\n\n\n    createUser(user) {\n      return this.http.post(this.apiUrl, user, this.httpOptions);\n    }\n    /**\r\n     * Aggiorna un utente esistente.\r\n     * @param id L'ID dell'utente da aggiornare.\r\n     * @param user L'oggetto User con i dati aggiornati.\r\n     * @returns Un Observable contenente l'utente aggiornato.\r\n     */\n\n\n    updateUser(id, user) {\n      const url = `${this.apiUrl}/${id}`;\n      return this.http.put(url, user, this.httpOptions);\n    }\n    /**\r\n     * Elimina un utente.\r\n     * @param id L'ID dell'utente da eliminare.\r\n     * @returns Un Observable<void> perché il backend restituisce noContent.\r\n     */\n\n\n    deleteUser(id) {\n      const url = `${this.apiUrl}/${id}`;\n      return this.http.delete(url);\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}